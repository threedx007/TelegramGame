import { useState, useCallback, useEffect } from 'react';
import { GameState, Player, Obstacle, Bonus, Particle, EducationalMessage, Pit, Platform } from '@/types/game';
import { useSound } from './useSound';

const EDUCATIONAL_MESSAGES: Record<string, EducationalMessage> = {
  fat: { emoji: 'üßà', title: '–ñ–∏—Ä–æ–≤–∞—è –ø—Ä–æ–±–∫–∞!', text: '–ù–µ —Å–ª–∏–≤–∞–π—Ç–µ –∂–∏—Ä –≤ —Å–µ–ø—Ç–∏–∫! –≠—Ç–æ –æ—Å–Ω–æ–≤–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞ –∑–∞—Å–æ—Ä–æ–≤.' },
  waste: { emoji: 'üóëÔ∏è', title: '–¢–≤–µ—Ä–¥—ã–µ –æ—Ç—Ö–æ–¥—ã!', text: '–¢–≤–µ—Ä–¥—ã–µ –æ—Ç—Ö–æ–¥—ã –∑–∞—Å–æ—Ä—è—é—Ç —Å–∏—Å—Ç–µ–º—É –∏ –Ω–∞—Ä—É—à–∞—é—Ç —Ä–∞–±–æ—Ç—É —Å–µ–ø—Ç–∏–∫–∞.' },
  chemical: { emoji: 'üß™', title: '–•–∏–º–∏—á–µ—Å–∫–æ–µ –∑–∞–≥—Ä—è–∑–Ω–µ–Ω–∏–µ!', text: '–ë—ã—Ç–æ–≤–∞—è —Ö–∏–º–∏—è —É–±–∏–≤–∞–µ—Ç –ø–æ–ª–µ–∑–Ω—ã–µ –±–∞–∫—Ç–µ—Ä–∏–∏ –≤ —Å–µ–ø—Ç–∏–∫–µ.' },
  ice: { emoji: 'üßä', title: '–ó–∞–º–µ—Ä–∑–∞–Ω–∏–µ!', text: '–£—Ç–µ–ø–ª–∏—Ç–µ —Å–µ–ø—Ç–∏–∫ –Ω–∞ –∑–∏–º—É, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∑–∞–º–µ—Ä–∑–∞–Ω–∏—è.' },
  lightning: { emoji: '‚ö°', title: '–≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã!', text: '–†–µ–≥—É–ª—è—Ä–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–π—Ç–µ –∫–æ–º–ø—Ä–µ—Å—Å–æ—Ä –∏ —ç–ª–µ–∫—Ç—Ä–æ–æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ.' },
  roots: { emoji: 'üå≥', title: '–ö–æ—Ä–Ω–∏ –¥–µ—Ä–µ–≤—å–µ–≤!', text: '–ù–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–π—Ç–µ —Å–µ–ø—Ç–∏–∫ —Ä—è–¥–æ–º —Å –±–æ–ª—å—à–∏–º–∏ –¥–µ—Ä–µ–≤—å—è–º–∏.' },
  pit: { emoji: 'üï≥Ô∏è', title: '–ü—Ä–æ–≤–∞–ª –≤ —è–º—É!', text: '–°–ª–µ–¥–∏—Ç–µ –∑–∞ –≥–µ—Ä–º–µ—Ç–∏—á–Ω–æ—Å—Ç—å—é —Å–µ–ø—Ç–∏–∫–∞! –í–æ–¥–∞ –Ω–µ –¥–æ–ª–∂–Ω–∞ –ø—Ä–æ—Å–∞—á–∏–≤–∞—Ç—å—Å—è –Ω–∞—Ä—É–∂—É.' }
};

export function useGameState() {
  const { sounds, enabled: soundEnabled, setEnabled: setSoundEnabled, volume, setVolume } = useSound();
  
  const [gameState, setGameState] = useState<GameState>({
    state: 'start',
    score: 0,
    distance: 0,
    level: 1,
    combo: 0,
    gameSpeed: 3.0, // –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–∞–π–º–∏–Ω–≥–∞
    bestScore: parseInt(localStorage.getItem('septicSurferBest') || '0')
  });

  const [player, setPlayer] = useState<Player>({
    x: 50,
    y: window.innerHeight - 90, // –°–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ –ø–æ–¥ –Ω–æ–≤—É—é –∑–µ–º–ª—é (50px + —Ä–∞–∑–º–µ—Ä –∏–≥—Ä–æ–∫–∞)
    width: 50, // –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä –∏–≥—Ä–æ–∫–∞ –¥–ª—è –ª—É—á—à–µ–π –≤–∏–¥–∏–º–æ—Å—Ç–∏
    height: 50,
    velocityY: 0,
    grounded: true,
    color: '#00A8FF',
    doubleJumpAvailable: true, // –î–æ—Å—Ç—É–ø–µ–Ω –¥–≤–æ–π–Ω–æ–π –ø—Ä—ã–∂–æ–∫ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    jumpsRemaining: 2 // –ù–∞ —Å—Ç–∞—Ä—Ç–µ –¥–æ—Å—Ç—É–ø–Ω–æ 2 –ø—Ä—ã–∂–∫–∞
  });

  const [obstacles, setObstacles] = useState<Obstacle[]>([]);
  const [bonuses, setBonuses] = useState<Bonus[]>([]);
  const [pits, setPits] = useState<Pit[]>([]);
  const [platforms, setPlatforms] = useState<Platform[]>([]);
  const [particles, setParticles] = useState<Particle[]>([]);
  const [educationalMessage, setEducationalMessage] = useState<EducationalMessage | null>(null);
  const [showCombo, setShowCombo] = useState(false);
  const [lastBonusTime, setLastBonusTime] = useState<number>(0);
  const [comboShowTime, setComboShowTime] = useState<number>(0);

  const resetGame = useCallback(() => {
    setGameState(prev => ({
      ...prev,
      state: 'playing',
      score: 0,
      distance: 0,
      level: 1,
      combo: 0,
      gameSpeed: 3.0 // –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–∞–π–º–∏–Ω–≥–∞
    }));

    setPlayer({
      x: 50,
      y: window.innerHeight - 90, // –°–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ –ø–æ–¥ –Ω–æ–≤—É—é –∑–µ–º–ª—é (50px + —Ä–∞–∑–º–µ—Ä –∏–≥—Ä–æ–∫–∞)
      width: 50, // –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä –∏–≥—Ä–æ–∫–∞ –¥–ª—è –ª—É—á—à–µ–π –≤–∏–¥–∏–º–æ—Å—Ç–∏
      height: 50,
      velocityY: 0,
      grounded: true,
      color: '#00A8FF',
      doubleJumpAvailable: true, // –°–±—Ä–æ—Å –¥–≤–æ–π–Ω–æ–≥–æ –ø—Ä—ã–∂–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ
      jumpsRemaining: 2 // –°–±—Ä–æ—Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä—ã–∂–∫–æ–≤
    });

    setObstacles([]);
    setBonuses([]);
    setPits([]);
    setPlatforms([]);
    setParticles([]);
    setEducationalMessage(null);
    setShowCombo(false);
  }, []);

  const pauseGame = useCallback(() => {
    setGameState(prev => ({ ...prev, state: 'paused' }));
  }, []);

  const resumeGame = useCallback(() => {
    setGameState(prev => ({ ...prev, state: 'playing' }));
  }, []);

  const gameOver = useCallback(() => {
    // –ò–≥—Ä–∞–µ–º –∑–∞–≤–µ—Ä—à–∞—é—â—É—é –º–µ–ª–æ–¥–∏—é
    sounds.playGameOverMusic();
    
    setGameState(prev => {
      const newBestScore = Math.max(prev.score, prev.bestScore);
      localStorage.setItem('septicSurferBest', newBestScore.toString());
      
      // Send score to Telegram if available
      if (window.Telegram?.WebApp) {
        window.Telegram.WebApp.sendData(JSON.stringify({
          score: prev.score,
          distance: Math.floor(prev.distance),
          timestamp: Date.now()
        }));
      }

      return {
        ...prev,
        state: 'gameOver',
        bestScore: newBestScore
      };
    });
  }, [sounds]);

  const collectBonus = useCallback((bonus: Bonus) => {
    console.log('Collecting bonus:', bonus, 'Game state before:', gameState.state);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–≥—Ä–∞ –≤—Å–µ –µ—â–µ –∏–¥–µ—Ç
    if (gameState.state !== 'playing') {
      console.log('Game not playing, ignoring bonus collection');
      return;
    }
    
    const now = Date.now();
    setLastBonusTime(now);
    
    setGameState(prev => {
      const newCombo = prev.combo + 1;
      const multiplier = Math.min(newCombo, 4);
      const points = bonus.value * multiplier;
      const newScore = prev.score + points;
      const newLevel = Math.floor(newScore / 500) + 1;
      const leveledUp = newLevel > prev.level;
      
      console.log('Bonus collected! Points:', points, 'Combo:', newCombo);
      
      // Play appropriate sound effects
      sounds.collectBonus();
      
      if (newCombo > 1) {
        setShowCombo(true);
        setComboShowTime(now);
        if (newCombo >= 5) {
          sounds.comboComplete();
        }
      }
      
      if (leveledUp) {
        sounds.levelUp();
      }

      return {
        ...prev,
        score: newScore,
        level: newLevel,
        combo: newCombo
      };
    });

    // Create particles
    const newParticles: Particle[] = [];
    for (let i = 0; i < 5; i++) {
      newParticles.push({
        x: bonus.x + bonus.width / 2,
        y: bonus.y + bonus.height / 2,
        vx: (Math.random() - 0.5) * 4,
        vy: (Math.random() - 0.5) * 4,
        size: 3,
        color: bonus.color,
        life: 30,
        maxLife: 30
      });
    }
    setParticles(prev => [...prev, ...newParticles]);
  }, [gameState.state, sounds]);

  const hitObstacle = useCallback((obstacle: Obstacle) => {
    const message = EDUCATIONAL_MESSAGES[obstacle.type];
    setEducationalMessage(message);
    // Play hit sound
    sounds.hitObstacle();
    // –ò–≥—Ä–∞ —Å—Ä–∞–∑—É –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è –ø—Ä–∏ —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏–∏
    gameOver();
  }, [sounds, gameOver]);

  const fallIntoPit = useCallback((pit: Pit) => {
    const message = EDUCATIONAL_MESSAGES['pit'];
    setEducationalMessage(message);
    // Play hit sound
    sounds.hitObstacle();
    // –ò–≥—Ä–∞ —Å—Ä–∞–∑—É –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è –ø—Ä–∏ –ø–∞–¥–µ–Ω–∏–∏ –≤ —è–º—É
    gameOver();
  }, [sounds, gameOver]);

  const shareScore = useCallback(() => {
    const shareText = `üèÜ –Ø –Ω–∞–±—Ä–∞–ª ${gameState.score} –æ—á–∫–æ–≤ –≤ –∏–≥—Ä–µ "–°–µ–ø—Ç–∏–∫-–°–µ—Ä—Ñ–µ—Ä"! üíß

üéÆ –ò–≥—Ä–∞ –æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —É—Ö–æ–¥–µ –∑–∞ —Å–µ–ø—Ç–∏–∫–æ–º
üìè –î–∏—Å—Ç–∞–Ω—Ü–∏—è: ${Math.floor(gameState.distance)} –º–µ—Ç—Ä–æ–≤

–ü–æ–ø—Ä–æ–±—É–π –ø–æ–±–∏—Ç—å –º–æ–π —Ä–µ–∫–æ—Ä–¥! üöÄ`;
    
    if (window.Telegram?.WebApp) {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –ø–æ–¥—Ö–æ–¥ –¥–ª—è Telegram Web App
      try {
        window.Telegram.WebApp.sendData(JSON.stringify({
          action: 'share_score',
          score: gameState.score,
          distance: Math.floor(gameState.distance),
          text: shareText
        }));
      } catch (error) {
        // Fallback –∫ –ø–æ–∫–∞–∑—É —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
        prompt('üìã –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç:', shareText);
      }
    } else {
      // Fallback –¥–ª—è –±—Ä–∞—É–∑–µ—Ä–∞ (–Ω–µ –≤ Telegram)
      if (navigator.share) {
        navigator.share({
          title: '–°–µ–ø—Ç–∏–∫-–°–µ—Ä—Ñ–µ—Ä - –ú–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç',
          text: shareText,
          url: window.location.href
        }).catch(() => {
          // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–µ–ª–∏—Ç—å—Å—è, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
          prompt('üìã –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç:', shareText);
        });
      } else if (navigator.clipboard) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–æ–∫—É–º–µ–Ω—Ç –≤ —Ñ–æ–∫—É—Å–µ –ø–µ—Ä–µ–¥ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        if (document.hasFocus()) {
          navigator.clipboard.writeText(shareText).then(() => {
            alert('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!');
          }).catch(() => {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
            prompt('üìã –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç:', shareText);
          });
        } else {
          // –î–æ–∫—É–º–µ–Ω—Ç –Ω–µ –≤ —Ñ–æ–∫—É—Å–µ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
          prompt('üìã –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç:', shareText);
        }
      } else {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
        prompt('üìã –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç:', shareText);
      }
    }
  }, [gameState.score, gameState.distance]);

  // –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–≤–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è (—Å–±—Ä–æ—Å –∫–æ–º–±–æ –ø–æ –≤—Ä–µ–º–µ–Ω–∏)
  const updateGameLogic = useCallback(() => {
    if (gameState.state === 'playing') {
      const now = Date.now();
      
      // –°–∫—Ä—ã–≤–∞–µ–º –∫–æ–º–±–æ —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã –ø–æ–∫–∞–∑–∞
      if (showCombo && comboShowTime > 0 && now - comboShowTime > 2000) {
        console.log('Hiding combo display');
        setShowCombo(false);
        setComboShowTime(0);
      }
      
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫–æ–º–±–æ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã –±–µ–∑ –±–æ–Ω—É—Å–æ–≤
      if (gameState.combo > 0 && lastBonusTime > 0 && now - lastBonusTime > 3000) {
        console.log('Resetting combo due to timeout');
        setGameState(prev => ({ ...prev, combo: 0 }));
        setLastBonusTime(0);
      }
    }
  }, [gameState.state, gameState.combo, lastBonusTime, showCombo, comboShowTime]);

  return {
    gameState,
    player,
    obstacles,
    bonuses,
    pits,
    platforms,
    particles,
    educationalMessage,
    showCombo,
    setGameState,
    setPlayer,
    setObstacles,
    setBonuses,
    setPits,
    setPlatforms,
    setParticles,
    setEducationalMessage,
    resetGame,
    pauseGame,
    resumeGame,
    gameOver,
    collectBonus,
    hitObstacle,
    fallIntoPit,
    shareScore,
    updateGameLogic,
    // Sound controls
    sounds,
    soundEnabled,
    setSoundEnabled,
    volume,
    setVolume
  };
}
